// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "accounts",
    columns: [
      { name: "username", type: "string" },
      { name: "password", type: "string" },
      { name: "region", type: "string" },
      { name: "skins", type: "string" },
      { name: "blueEssence", type: "int" },
    ],
  },
  {
    name: "sold",
    columns: [
      { name: "stripe_id", type: "string" },
      { name: "acc", type: "link", link: { table: "accounts" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Accounts = InferredTypes["accounts"];
export type AccountsRecord = Accounts & XataRecord;

export type Sold = InferredTypes["sold"];
export type SoldRecord = Sold & XataRecord;

export type DatabaseSchema = {
  accounts: AccountsRecord;
  sold: SoldRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Boata-Andrei-s-workspace-8lhv3q.eu-west-1.xata.sh/db/boundless",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
